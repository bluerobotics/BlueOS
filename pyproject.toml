[tool.poetry]
name = "blueos-docker"
version = "0.0.1"
description = "Blue Robotics BlueOS computer project"
authors = ["Software Department <software@bluerobotics.com>"]
license = "MIT"
package-mode = false

[tool.setuptools]
py-modules = []

[tool.poetry.dependencies]
python = "~3.11"
pytest-xdist = "^3.3.1"
toml = "^0.10.2"

[tool.poetry.dev-dependencies]
black = "22.3.0"
isort = "5.8"
pylint = "3.0"
mypy = "1.4.1"
pylint-pydantic = "0.3.2"
pytest = "7.4.2"
coverage = "7.5.1"
pytest-cov = "4.1.0"
pydantic = "1.10.12"
docker = "6.1.3"
aiodocker = "0.21.0"
aiohttp = "3.9.5"
pylint-plugin-utils = "0.8.2"
pykson = {git = "https://github.com/patrickelectric/pykson.git", rev = "fcab71c1eadd6c6b730ca21a5eecb3bf9c374507"}
appdirs = "1.4.4"
loguru = "0.5.3"
nmeasim = "1.1.1.0"
pynmea2 = "1.18.0"
pyfakefs = "5.2.4"
validators = "0.18.2"
pytest-asyncio = "0.14.0"
pytest-mock = "3.10.0"
pytest-timeout = "2.1.0"
ruff = "0.0.288"
pyelftools = "0.30"
types-requests = "2.31.0.2"
types-tabulate = "0.9.0.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest]
addopts = "--cov-report html --cov-report term"

[tool.pytest.ini_options]
markers = [
    "timeout",
]

[tool.coverage.run]
branch = true
omit = [
    "*/setup.py",
    "*/__init__.py",
    ]

[tool.coverage.report]
fail_under = 75

[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.mypy]
allow_untyped_decorators = true
disallow_subclassing_any = false
ignore_missing_imports = true
strict = true
warn_unreachable = true
warn_unused_ignores = false
plugins = "pydantic.mypy"
disable_error_code = [
    "call-arg",
]

[tool.ruff]
ignore = [
    "A003", # BuiltinAttributeShadowing: Unnecessary restriction (not a source of confusion)
    "E501", # LineTooLong: Let black take care of
    "F401", # UnusedImport: We are using pylint 'ignore' comments for it
    "F821", # UndefinedName: We are using pylint 'ignore' comments for it
    "F841", # UnusedVariable: We are using pylint 'ignore' comments for it
    "E402", # ModuleImportNotAtTopOfFile: noqa doesn't work and this is required at some places
]

[tool.pylint]
    [tool.pylint.master]
    load-plugins = "pylint_pydantic"
    enable = "all"
    disable = [
        "attribute-defined-outside-init",
        "broad-except",
        "duplicate-code",
        "import-error",
        "inconsistent-return-statements",
        "invalid-name",
        "line-too-long", # We already have this in black.
        "locally-disabled", # We know what we are doing, necessary to load plugins in runtime
        "logging-fstring-interpolation", # We want a good-to-read logging interface
        "missing-class-docstring",
        "missing-function-docstring",
        "missing-module-docstring",
        "no-member", # Some members are created in runtime, pylint fails to detect such cases
        "no-name-in-module", # Names can be generated in runtime
        "protected-access", # Necessary for internal tests
        "suppressed-message",
        "too-few-public-methods", # We know what kind of architecture we want
        "too-many-public-methods", # Wrappers will have multiple public methods
        "use-implicit-booleaness-not-comparison-to-zero",
        "use-implicit-booleaness-not-comparison-to-string",
        "useless-super-delegation", # Fails to check it properly
        "wildcard-import", # Necessary to locate installed plugins
        "wrong-import-position",
        ]

    [tool.pylint.miscellaneous]
    notes = [ "FIXME" ] # TODO is removed for internal development