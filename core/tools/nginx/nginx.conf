user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 768;
    # multi_accept on;
}

http {
    client_max_body_size 2G;
    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # Add 10min timeout if we get stuck while processing something like docker images and firmware upload
    proxy_read_timeout 600s;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Redirect legacy companion port (Companion 0.0.X) to our new homepage
    server{
        listen 2770; # IPv4
        listen [::]:2770; # IPv6

        location / {
            rewrite ^/(.*)$ http://$host redirect;
        }
    }

    server {
        listen 80; # IPv4
        listen [::]:80; # IPv6

        add_header Access-Control-Allow-Origin *;

        # Endpoint used for backend status checks.
        # It will always return an empty 204 response when online.
        location /status {
            return 204;
        }

        location /ardupilot-manager {
            include cors.conf;
            rewrite ^/ardupilot-manager$ /ardupilot-manager/ redirect;
            rewrite ^/ardupilot-manager/(.*)$ /$1 break;
            proxy_pass http://localhost:8000;
        }

        location /bag {
            include cors.conf;
            rewrite ^/bag$ /bag/ redirect;
            rewrite ^/bag/(.*)$ /$1 break;
            proxy_pass http://localhost:9101;
        }

        location /beacon {
            include cors.conf;
            rewrite ^/beacon$ /beacon/ redirect;
            rewrite ^/beacon/(.*)$ /$1 break;
            proxy_pass http://localhost:9111;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Interface-Ip $server_addr;
        }

        location /bridget {
            include cors.conf;
            rewrite ^/bridget$ /bridget/ redirect;
            rewrite ^/bridget/(.*)$ /$1 break;
            proxy_pass http://localhost:27353;
        }

        location /cable-guy {
            include cors.conf;
            rewrite ^/cable-guy$ /cable-guy/ redirect;
            rewrite ^/cable-guy/(.*)$ /$1 break;
            proxy_pass http://localhost:9090;
        }

        location /commander {
            include cors.conf;
            rewrite ^/commander$ /commander/ redirect;
            rewrite ^/commander/(.*)$ /$1 break;
            proxy_pass http://localhost:9100;
        }

        location /docker {
            limit_except GET {
                deny all;
            }
            rewrite ^/docker$ /docker/ redirect;
            rewrite ^/docker/(.*)$ /$1 break;
            proxy_pass http://unix:/var/run/docker.sock:/;
        }

        location /file-browser {
            rewrite ^/file-browser$ /file-browser/ redirect;
            rewrite ^/file-browser/(.*)$ /$1 break;
            proxy_pass http://localhost:7777;
        }

        location /helper {
            include cors.conf;
            rewrite ^/helper$ /helper/ redirect;
            rewrite ^/helper/(.*)$ /$1 break;
            proxy_pass http://localhost:81;
        }

        location /kraken {
            include cors.conf;
            rewrite ^/kraken$ /kraken/ redirect;
            rewrite ^/kraken/(.*)$ /$1 break;
            proxy_pass http://localhost:9134;
        }

        location /nmea-injector {
            include cors.conf;
            rewrite ^/nmea-injector$ /nmea-injector/ redirect;
            rewrite ^/nmea-injector/(.*)$ /$1 break;
            proxy_pass http://localhost:2748;
        }

        location ^~ /logviewer {
            # ^~ makes this a higher priority than locations with regex
            expires 10d;
            root /var/www/html;
        }

        location /mavlink2rest {
            # Hide the header from the upstream application
            proxy_hide_header Access-Control-Allow-Origin;

            include cors.conf;
            rewrite ^/mavlink2rest$ /mavlink2rest/ redirect;
            rewrite ^/mavlink2rest/(.*)$ /$1 break;
            proxy_pass http://localhost:6040;
            # next two lines are required for websockets
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        location /mavlink-camera-manager {
            include cors.conf;
            rewrite ^/mavlink-camera-manager$ /mavlink-camera-manager/ redirect;
            rewrite ^/mavlink-camera-manager/(.*)$ /$1 break;
            proxy_pass http://localhost:6020;
        }

        location /network-test {
            include cors.conf;
            rewrite ^/network-test$ /network-test/ redirect;
            rewrite ^/network-test/(.*)$ /$1 break;
            proxy_pass http://localhost:9120;
            # next two lines are required for websockets
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        location /system-information {
            include cors.conf;
            rewrite ^/system-information$ /system-information/ redirect;
            rewrite ^/system-information/(.*)$ /$1 break;
            proxy_pass http://localhost:6030;
            # next two lines are required for websockets
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        location /terminal {
            rewrite ^/terminal$ /terminal/ redirect;
            rewrite ^/terminal/(.*)$ /$1 break;
            proxy_pass http://localhost:8088;
            # next two lines are required for websockets
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        location /version-chooser {
            include cors.conf;
            rewrite ^/version-chooser$ /version-chooser/ redirect;
            rewrite ^/version-chooser/(.*)$ /$1 break;
            proxy_pass http://localhost:8081;
            proxy_buffering off;
            expires -1;
            add_header Cache-Control no-store;
        }

        location /wifi-manager {
            include cors.conf;
            rewrite ^/wifi-manager$ /wifi-manager/ redirect;
            rewrite ^/wifi-manager/(.*)$ /$1 break;
            proxy_pass http://localhost:9000;
        }

        location /ping {
            include cors.conf;
            rewrite ^/ping$ /ping/ redirect;
            rewrite ^/ping/(.*)$ /$1 break;
            proxy_pass http://localhost:9110;
        }

        location / {
            root /home/pi/frontend;
            try_files $uri $uri/ /index.html;
            autoindex on;
            # allow frontend to see files using json
            autoindex_format json;

            # prevent caching of index.html
            if ($uri = /index.html) {
                add_header Last-Modified "";
                add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            }
        }

        location /assets/ {
            root /home/pi/frontend;
            try_files $uri $uri/;
            autoindex on;
            add_header Cache-Control "public, max-age=604800";
        }

        location ~ ^/upload(/.*)$ {
            client_max_body_size 100M;
            alias /usr/blueos$1;

            # Change the access permissions of the uploaded file
            dav_access group:rw all:r;
            create_full_put_path on;

            # Configure the allowed HTTP methods
            dav_methods PUT DELETE MKCOL COPY MOVE;
        }

        location /userdata {
            root /usr/blueos;
            autoindex on;
            # use json as it is easily consumed by the frontend
            # users already have access through the file browser
            autoindex_format json;
            # disable cache to improve developer experience
            # this should have very little impact for users
            expires -1;
            add_header Cache-Control no-store;
            add_header Access-Control-Allow-Origin *;
        }

        # Helper to redirect services to their port
        location ~ ^/redirect-port/(?<port>\d+) {
            return 301 $scheme://$host:$port;
        }
    }
}
