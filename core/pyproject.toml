[project]
name = "blueos-core"
version = "1.4.0"
description = "Core workspace with backend services for BlueOS."
requires-python = ">=3.11"
dependencies = [
  "bridges",
  "commonwealth",
  "ardupilot_manager",
  "bag_of_holding",
  "beacon",
  "bridget",
  "cable_guy",
  "commander",
  "helper",
  "kraken",
  "log_zipper",
  "nmea_injector",
  "pardal",
  "ping",
  "versionchooser",
  "wifi",
]

[dependency-groups]
dev = [
  "coverage==7.9.2",
  "nmeasim==1.1.1.0",
  "pytest==8.4.1",
  "pytest-cov==6.2.1",
  "pyfakefs==5.9.1",
  "pytest-asyncio==1.0.0",
  "pytest-mock==3.14.1",
  "pytest-timeout==2.4.0",
  "pytest-xdist==3.8.0",
  "pyelftools==0.32",
]
lint = [
  "black==25.1.0",
  "isort==5.13.2",
  "pylint==3.0",
  "mypy==1.16.1",
  "ruff==0.12.2",
  "pylint-pydantic==0.3.5",
  "pylint-plugin-utils==0.9.0",
  "types-requests==2.32.4.20250611",
]

[tool.uv]
default-groups = ["dev", "lint"]

[tool.uv.sources]
bridges = { workspace = true }
commonwealth = { workspace = true }
ardupilot_manager = { workspace = true }
bag_of_holding = { workspace = true }
beacon = { workspace = true }
bridget = { workspace = true }
cable_guy = { workspace = true }
commander = { workspace = true }
helper = { workspace = true }
kraken = { workspace = true }
log_zipper = { workspace = true }
nmea_injector = { workspace = true }
pardal = { workspace = true }
ping = { workspace = true }
versionchooser = { workspace = true }
wifi = { workspace = true }

[tool.uv.workspace]
members = ["services/*", "libs/*"]

# ------------------ Tooling Configurations ------------------

[tool.pytest.ini_options]
markers = [
  "timeout",
]

[tool.coverage.run]
branch = true
omit = [
  "*/setup.py",
  "*/__init__.py",
]

[tool.coverage.report]
fail_under = 75

[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.mypy]
allow_untyped_decorators = true
disallow_subclassing_any = false
ignore_missing_imports = true
strict = true
warn_unreachable = true
warn_unused_ignores = false
plugins = "pydantic.mypy"
disable_error_code = [
  "call-arg",
]

[tool.ruff]
  [tool.ruff.lint]
  ignore = [
    "A003", # BuiltinAttributeShadowing: Unnecessary restriction (not a source of confusion)
    "E501", # LineTooLong: Let black take care of
    "F401", # UnusedImport: We are using pylint 'ignore' comments for it
    "F821", # UndefinedName: We are using pylint 'ignore' comments for it
    "F841", # UnusedVariable: We are using pylint 'ignore' comments for it
    "E402", # ModuleImportNotAtTopOfFile: noqa doesn't work and this is required at some places
  ]

[tool.pylint]
  [tool.pylint.master]
  load-plugins = "pylint_pydantic"
  enable = "all"
  disable = [
    "attribute-defined-outside-init",
    "broad-except",
    "duplicate-code",
    "import-error",
    "inconsistent-return-statements",
    "invalid-name",
    "line-too-long", # We already have this in black.
    "locally-disabled", # We know what we are doing, necessary to load plugins in runtime
    "logging-fstring-interpolation", # We want a good-to-read logging interface
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-member", # Some members are created in runtime, pylint fails to detect such cases
    "no-name-in-module", # Names can be generated in runtime
    "protected-access", # Necessary for internal tests
    "suppressed-message",
    "too-few-public-methods", # We know what kind of architecture we want
    "too-many-public-methods", # Wrappers will have multiple public methods
    "use-implicit-booleaness-not-comparison-to-zero",
    "use-implicit-booleaness-not-comparison-to-string",
    "useless-super-delegation", # Fails to check it properly
    "wildcard-import", # Necessary to locate installed plugins
    "wrong-import-position",
  ]

  [tool.pylint.miscellaneous]
  notes = [ "FIXME" ] # TODO is removed for internal development
